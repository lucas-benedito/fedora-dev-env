- name: Fetch Fedora release metadata
  uri:
    url: https://getfedora.org/releases.json
  register: fedora_releases

- name: Get latest version of Fedora
  set_fact:
    fedora_version: "{{ fedora_releases.json | map(attribute='version') | max }}"
  when: fedora_version == "latest"

- name: Set VM name if not explicitly provided
  set_fact:
    vm_name: "fedora{{ fedora_version }}"
  when: vm_name is undefined

- name: Check for existing VM
  stat:
    path: "{{ packer_output_dir }}/{{ vm_name }}"
  register: output_dir

- name: Fail if VM already exists
  fail:
    msg: "VM already exists at {{ packer_output_dir }}/{{ vm_name }}"
  when: output_dir.stat.exists

- name: Extract netinst ISO information
  set_fact:
    iso_info: |
      {{
        fedora_releases.json |
        selectattr("version", "eq", fedora_version) |
        selectattr("arch", "eq", fedora_arch_map[ansible_architecture]) |
        selectattr("variant", "eq", "Server") |
        selectattr("link", "search", "netinst") |
        first
      }}

- name: Create temporary directory for rendering kickstart
  tempfile:
    state: directory
  register: kickstart_dest

- name: Render kickstart
  template:
    src: ks.cfg.j2
    dest: "{{ kickstart_dest.path }}/ks.cfg"

- name: Construct Packer command
  set_fact:
    packer_cmd: |-
      packer build \
        -var 'name={{ vm_name }}' \
        -var 'architecture={{ ansible_architecture }}' \
        -var 'guest_os_type={{ vmware_guest_os_map[ansible_architecture] }}' \
        -var 'ssh_username={{ fedora_username }}' \
        -var 'iso_url={{ iso_info.link }}' \
        -var 'iso_checksum={{ iso_info.sha256 }}' \
        -var 'cpus={{ cpus }}' \
        -var 'memory={{ memory }}' \
        -var 'disk_size={{ disk_size }}' \
        -var 'kickstart_dir={{ kickstart_dest.path }}' \
        -var 'output_directory={{ packer_output_dir }}/{{ vm_name }}' \
        {{ packer_dir }}

- name: Run Packer
  command: '{{ packer_cmd | regex_replace("\\$", "", multiline=True) }}'
  when: not debug|bool
